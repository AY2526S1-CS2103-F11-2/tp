@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":DeleteCommandParser" as DeleteCommandParser LOGIC_COLOR
participant "d:DeleteCommand" as DeleteCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
end box

box Storage STORAGE_COLOR_T1
participant ":Storage" as Storage STORAGE_COLOR
end box

[-> LogicManager : execute("delete 1")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("delete 1")
activate AddressBookParser

create DeleteCommandParser
AddressBookParser -> DeleteCommandParser
activate DeleteCommandParser
DeleteCommandParser --> AddressBookParser
deactivate DeleteCommandParser

AddressBookParser -> DeleteCommandParser : parse("1")
activate DeleteCommandParser

alt Invalid index format
    DeleteCommandParser -> DeleteCommandParser : throw ParseException
    deactivate DeleteCommandParser
    DeleteCommandParser --> AddressBookParser : raises ParseException
    destroy DeleteCommandParser
    AddressBookParser --> LogicManager : raises ParseException
    deactivate AddressBookParser
    LogicManager --> [ : propagate ParseException
    deactivate LogicManager
else Valid index
    create DeleteCommand
    DeleteCommandParser -> DeleteCommand
    activate DeleteCommand
    DeleteCommand --> DeleteCommandParser
    deactivate DeleteCommand

    DeleteCommandParser --> AddressBookParser : command
    deactivate DeleteCommandParser
    ' Hidden arrow to position the destroy marker below the end of the activation bar.
    DeleteCommandParser -[hidden]-> AddressBookParser
    destroy DeleteCommandParser

    AddressBookParser --> LogicManager : command
    deactivate AddressBookParser

    LogicManager -> DeleteCommand : execute(model)
    activate DeleteCommand

    DeleteCommand -> Model : getFilteredPersonList()
    activate Model
    Model --> DeleteCommand : lastShownList
    DeleteCommand -> DeleteCommand : assert lastShownList != null

    alt Invalid displayed index
        DeleteCommand -> DeleteCommand : throw CommandException
        deactivate Model
        DeleteCommand --> LogicManager : raises CommandException
        deactivate DeleteCommand
        LogicManager --> [ : propagate CommandException
        deactivate LogicManager
    else Valid index
        DeleteCommand -> DeleteCommand : select personToDelete
        DeleteCommand -> DeleteCommand : assert model.hasPerson(personToDelete)
        DeleteCommand -> Model : updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS)
        Model --> DeleteCommand
        DeleteCommand -> Model : deletePerson(personToDelete)
        Model --> DeleteCommand
        deactivate Model

        DeleteCommand -> Model : hasPerson(personToDelete)
        activate Model
        Model --> DeleteCommand : false
        deactivate Model
        DeleteCommand -> DeleteCommand : assert personToDelete removed

        DeleteCommand -> DeleteCommand : format success message
        create CommandResult
        DeleteCommand -> CommandResult : new(String.format(...))
        activate CommandResult
        CommandResult --> DeleteCommand
        deactivate CommandResult

        DeleteCommand --> LogicManager : result
        deactivate DeleteCommand

        LogicManager -> Storage : saveAddressBook(model.getAddressBook())
        activate Storage
        Storage --> LogicManager
        deactivate Storage

        [<-- LogicManager
        deactivate LogicManager
    end
end

@enduml